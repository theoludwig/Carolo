@startuml UML

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

enum GameStatus <<enumeration>> {
  LOBBY
  PLAY
  WHITE_WON
  BLACK_WON
}

interface GameState <<interface>> {
  {field} + currentPlayerIndex: Number {abstract}
}
GameState o--> "1\n- board" Board : <<Owns>>
GameState o--> "2\n- players" Player : <<Owns>>
GameState *--> "1\n- status" GameStatus : <<Has>>

class Game<GameState> extends Observer {
  {method} + Game(board: Board, players: Player[2])
  {method} + getCurrentPlayer(): Player
  {method} + getPlayer(index: Number): Player
  {method} + setPlayerName(index: Number, name: String)
  {method} + setPlayerColor(index: Number, color: PieceColor)
  {method} + getBoard(): Board
  {method} + play()
  {method} + restart()
  {method} + playMove(fromPosition: Position, toPosition: Position)
  {method} + getStatus(): GameStatus
  {method} - nextPlayer()
}
Game ..> GameState : <<Uses>>
Game ..> Position : <<Uses>>

interface PlayerState <<interface>> {
  {field} + name: String {abstract}
}
PlayerState o--> "1\n- color" PieceColor : <<Chooses>>
PlayerState *--> "*\n- capturedPieces" Piece : <<Captures>>

class Player<PlayerState> extends Observer {
  {field} - name: String

  {method} + Player(name: String, color: PieceColor)
  {method} + setName(name: String)
  {method} + setColor(color: PieceColor)
  {method} + addCapturedPiece(piece: Piece)
  {method} + removeAllCapturedPieces()

  {method} + getName(): String
  {method} + getColor(): PieceColor
  {method} + getCapturedPieces(): Piece[*]
}
Player ..> PlayerState : <<Uses>>

enum PieceType <<enumeration>> {
  AYMOND
  BAYARD
  CAROLO
  EGO
  HUBRIS
}

enum PieceColor <<enumeration>> {
  BLACK
  WHITE

  {method} + getOpposite(): PieceColor
}

abstract class Piece <<abstract>> {
  {field} - hasMoved: Boolean

  {method} + Piece(color: PieceColor)

  {method} + getDirection(color: PieceColor): Number {static}
  {method} + getDirection(): Number
  {method} + setHasMoved()
  {method} + hasMoved(): Boolean
  {method} + getColor(): PieceColor
  {method} + canBeCapturedBy(piece: PieceType): Boolean
  {method} + canJumpOverPieces(): Boolean
  {method} + shouldMoveUntilObstacle(): Boolean
  {method} + getMovesOffsets(maximumOffset: Number): Position[*] {abstract}
  {method} + getCapturablePiecesTypes(): PieceType[*] {abstract}
  {method} + getType(): PieceType {abstract}
}
Piece o--> "1\n- color" PieceColor : <<Has>>
Piece ..> Position : <<Uses>>
Piece ..> PieceType : <<Is>>

class Aymond extends Piece {
  {method} + Aymond(color: PieceColor)
  {method} + getMovesOffsets(maximumOffset: Number): Position[*]
  {method} + getCapturablePiecesTypes(): PieceType[*]
  {method} + getType(): PieceType
}

class Bayard extends Piece {
  {method} + Bayard(color: PieceColor)
  {method} + canJumpOverPieces(): Boolean
  {method} + getMovesOffsets(maximumOffset: Number): Position[*]
  {method} + getCapturablePiecesTypes(): PieceType[*]
  {method} + getType(): PieceType
}

class Carolo extends Piece {
  {method} + Carolo(color: PieceColor)
  {method} + shouldMoveUntilObstacle(): Boolean
  {method} + getMovesOffsets(maximumOffset: Number): Position[*]
  {method} + getCapturablePiecesTypes(): PieceType[*]
  {method} + getType(): PieceType
}

class Ego extends Piece {
  {method} + Ego(color: PieceColor)
  {method} + getMovesOffsets(maximumOffset: Number): Position[*]
  {method} + getCapturablePiecesTypes(): PieceType[*]
  {method} + getType(): PieceType
}

class Hubris extends Piece {
  {method} + Hubris(color: PieceColor)
  {method} + getMovesOffsets(maximumOffset: Number): Position[*]
  {method} + getCapturablePiecesTypes(): PieceType[*]
  {method} + getType(): PieceType
}

interface BoardBaseState <<interface>> {}
BoardBaseState *--> "64\n- board" PiecePosition : <<Owns>>

abstract class BoardBase<BoardBaseState> <<abstract>> extends Observer {
  {field} + {static} SIZE = 8 : Number {readOnly}

  {method} + reset()
  {method} + getPiecePosition(position: Position): PiecePosition
  {method} + getLastRow(color: PieceColor): Number
  {method} + getAymondInitialRow(color: PieceColor): Number
  {method} + getHubrisInitialRow(color: PieceColor): Number
  {method} + getEgoPiecePosition(color: PieceColor): PiecePosition
  {method} - setupPieces(color: PieceColor)
}
BoardBase ..> BoardBaseState : <<Uses>>
BoardBase ..> Position : <<Uses>>
BoardBase ..> PieceColor : <<Uses>>

class Board extends BoardBase {
  {method} + Board()
  {method} + getAvailablePiecePositions(fromPosition: Position): PiecePosition[*]
  {method} + canMove(fromPosition: Position, toPosition: Position): Boolean
  {method} + isCaptureMove(fromPosition: Position, toPosition: Position): Boolean
  {method} + move(fromPosition: Position, toPosition: Position): Move[*]
  {method} + powerOfHubrisAttraction(fromPosition: Position): Boolean
  {method} + isReconquest(color: PieceColor): Boolean
  {method} + isCheck(color: PieceColor): Boolean
  {method} + isCheckAfterMove(fromPosition: Position, toPosition: Position): Boolean
}
Board ..> Position : <<Uses>>
Board ..> PieceColor : <<Uses>>
Board ..> PieceType : <<Uses>>
Board o--> "*\n- moves" Move : <<Saves>>

interface Move <<interface>> {
  {field} + fromPosition: Position
  {field} + toPosition: Position
  {field} + capturedPiece: Piece?
  {field} + isNextPlayerTurn: Boolean
}

class Position {
  {field} + column: Number
  {field} + row: Number

  {method} + Position(column: Number, row: Number)
  {method} + add(position: Position)
  {method} + isInsideSquare(position: Position): boolean
  {method} + getIntermediatePositions(position: Position): Position[*]
}

class PiecePosition {
  {method} + PiecePosition(position: Position, piece: Piece)
  {method} + PiecePosition(position: Position)
  {method} + setPiece(piece: Piece)

  {method} + isOccupied(): Boolean
  {method} + isFree(): Boolean
  {method} + getPiece(): Piece
  {method} + getPosition(): Position
}
PiecePosition o--> "1\n- piece" Piece : <<Owns>>
PiecePosition o--> "1\n- position" Position : <<Is Located>>

abstract class Observer<S> <<abstract>> {
  {field} - internalState: S
  {field} - listeners: Listener<S>[]

  {method} + <<Create>> Observer(initialState: S)
  {method} + getState(): S
  {method} - setState(state: S)
  {method} + getState(): S
  {method} + subscribe(listener: Listener<S>)
  {method} + unsubscribe(listener: Listener<S>)
}

@enduml
